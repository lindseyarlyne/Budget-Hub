{"ast":null,"code":"import{useState,useEffect,useRef,useCallback,useMemo}from'react';export const useVirtualizer=_ref=>{let{items,itemHeight,containerHeight,overscan=5}=_ref;const[scrollTop,setScrollTop]=useState(0);const containerRef=useRef(null);const itemRefs=useRef([]);// Calculate visible range\nconst visibleRange=useMemo(()=>{const start=Math.floor(scrollTop/itemHeight);const visibleCount=Math.ceil(containerHeight/itemHeight);const end=Math.min(start+visibleCount+overscan,items.length);return{start:Math.max(0,start-overscan),end};},[scrollTop,itemHeight,containerHeight,overscan,items.length]);// Get visible items with their positions\nconst visibleItems=useMemo(()=>{const result=[];for(let i=visibleRange.start;i<visibleRange.end;i++){if(items[i]){result.push({index:i,item:items[i],top:i*itemHeight});}}return result;},[items,visibleRange,itemHeight]);// Handle scroll events with throttling\nconst handleScroll=useCallback(()=>{if(containerRef.current){setScrollTop(containerRef.current.scrollTop);}},[]);// Throttled scroll handler for better performance\nconst throttledHandleScroll=useCallback(()=>{let ticking=false;return()=>{if(!ticking){requestAnimationFrame(()=>{handleScroll();ticking=false;});ticking=true;}};},[handleScroll]);// Scroll to specific index\nconst scrollToIndex=useCallback(index=>{if(containerRef.current&&index>=0&&index<items.length){const scrollTop=index*itemHeight;containerRef.current.scrollTop=scrollTop;setScrollTop(scrollTop);}},[items.length,itemHeight]);// Set up scroll listener\nuseEffect(()=>{const container=containerRef.current;if(!container)return;const scrollHandler=throttledHandleScroll();container.addEventListener('scroll',scrollHandler,{passive:true});return()=>{container.removeEventListener('scroll',scrollHandler);};},[throttledHandleScroll]);// Calculate total height for scrollbar\nconst totalHeight=items.length*itemHeight;// Style for the container\nconst containerStyle=useMemo(()=>({height:containerHeight,overflow:'auto',position:'relative'}),[containerHeight]);// Style for the inner container that creates the scrollable area\nconst innerStyle=useMemo(()=>({height:totalHeight,position:'relative'}),[totalHeight]);return{containerRef,itemRefs,visibleItems,scrollToIndex,containerStyle,innerStyle,totalHeight};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}