{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\n// Simulated API service - replace with actual API calls\nconst budgetService = {\n  getBudgetData: async () => {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      income: [{\n        id: 1,\n        amount: 3500,\n        category: 'Salary',\n        date: '2024-01-15'\n      }, {\n        id: 2,\n        amount: 500,\n        category: 'Freelance',\n        date: '2024-01-20'\n      }],\n      expenses: [{\n        id: 1,\n        amount: 1200,\n        category: 'Housing',\n        date: '2024-01-01'\n      }, {\n        id: 2,\n        amount: 400,\n        category: 'Food & Dining',\n        date: '2024-01-05'\n      }, {\n        id: 3,\n        amount: 200,\n        category: 'Transportation',\n        date: '2024-01-10'\n      }]\n    };\n  },\n  getPayPeriods: async () => {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return [{\n      id: 1,\n      startDate: '2024-01-01',\n      endDate: '2024-01-15',\n      totalIncome: 2000,\n      totalExpenses: 1500,\n      remaining: 500,\n      isCurrent: false\n    }, {\n      id: 2,\n      startDate: '2024-01-16',\n      endDate: '2024-01-31',\n      totalIncome: 2000,\n      totalExpenses: 1800,\n      remaining: 200,\n      isCurrent: true\n    }];\n  },\n  getSavingsData: async () => {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    return {\n      goal: 10000,\n      entries: [{\n        id: 1,\n        amount: 500,\n        date: '2024-01-15',\n        type: 'deposit'\n      }, {\n        id: 2,\n        amount: 300,\n        date: '2024-01-31',\n        type: 'deposit'\n      }, {\n        id: 3,\n        amount: 600,\n        date: '2024-02-15',\n        type: 'deposit'\n      }]\n    };\n  }\n};\n\n// Cache implementation for performance\nclass DataCache {\n  constructor(maxAge = 5 * 60 * 1000) {\n    // 5 minutes default\n    this.cache = new Map();\n    this.maxAge = maxAge;\n  }\n  get(key) {\n    const item = this.cache.get(key);\n    if (!item) return null;\n    if (Date.now() - item.timestamp > this.maxAge) {\n      this.cache.delete(key);\n      return null;\n    }\n    return item.data;\n  }\n  set(key, data) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n  clear() {\n    this.cache.clear();\n  }\n}\nconst cache = new DataCache();\nexport const useBudgetData = () => {\n  _s();\n  const [budgetData, setBudgetData] = useState(null);\n  const [payPeriods, setPayPeriods] = useState(null);\n  const [savingsData, setSavingsData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Memoized fetch functions to prevent unnecessary recreations\n  const fetchBudgetData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Check cache first\n      const cachedData = cache.get('budgetData');\n      if (cachedData) {\n        setBudgetData(cachedData);\n        setLoading(false);\n        return;\n      }\n      const data = await budgetService.getBudgetData();\n      cache.set('budgetData', data);\n      setBudgetData(data);\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const fetchPayPeriods = useCallback(async () => {\n    try {\n      const cachedData = cache.get('payPeriods');\n      if (cachedData) {\n        setPayPeriods(cachedData);\n        return;\n      }\n      const data = await budgetService.getPayPeriods();\n      cache.set('payPeriods', data);\n      setPayPeriods(data);\n    } catch (err) {\n      console.error('Failed to fetch pay periods:', err);\n    }\n  }, []);\n  const fetchSavingsData = useCallback(async () => {\n    try {\n      const cachedData = cache.get('savingsData');\n      if (cachedData) {\n        setSavingsData(cachedData);\n        return;\n      }\n      const data = await budgetService.getSavingsData();\n      cache.set('savingsData', data);\n      setSavingsData(data);\n    } catch (err) {\n      console.error('Failed to fetch savings data:', err);\n    }\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const loadData = async () => {\n      await Promise.all([fetchBudgetData(), fetchPayPeriods(), fetchSavingsData()]);\n    };\n    loadData();\n  }, [fetchBudgetData, fetchPayPeriods, fetchSavingsData]);\n\n  // Refresh function for manual cache invalidation\n  const refreshData = useCallback(() => {\n    cache.clear();\n    fetchBudgetData();\n    fetchPayPeriods();\n    fetchSavingsData();\n  }, [fetchBudgetData, fetchPayPeriods, fetchSavingsData]);\n\n  // Memoized return value to prevent unnecessary re-renders\n  return useMemo(() => ({\n    budgetData,\n    payPeriods,\n    savingsData,\n    loading,\n    error,\n    refreshData\n  }), [budgetData, payPeriods, savingsData, loading, error, refreshData]);\n};\n_s(useBudgetData, \"emcl5za5hR9S4UAhjNfZh40MS9k=\");\nexport const useBudgetActions = () => {\n  _s2();\n  const [loading, setLoading] = useState(false);\n  const addBudgetEntry = useCallback(async entry => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Invalidate cache to refresh data\n      cache.clear();\n      console.log('Added budget entry:', entry);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Failed to add budget entry:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const updateBudgetEntry = useCallback(async (id, updates) => {\n    setLoading(true);\n    try {\n      await new Promise(resolve => setTimeout(resolve, 800));\n      cache.clear();\n      console.log('Updated budget entry:', id, updates);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Failed to update budget entry:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const deleteBudgetEntry = useCallback(async id => {\n    setLoading(true);\n    try {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      cache.clear();\n      console.log('Deleted budget entry:', id);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Failed to delete budget entry:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return useMemo(() => ({\n    addBudgetEntry,\n    updateBudgetEntry,\n    deleteBudgetEntry,\n    loading\n  }), [addBudgetEntry, updateBudgetEntry, deleteBudgetEntry, loading]);\n};\n_s2(useBudgetActions, \"oS9urPmAVNOkeVhHJcXgGkWJn/Y=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","budgetService","getBudgetData","Promise","resolve","setTimeout","income","id","amount","category","date","expenses","getPayPeriods","startDate","endDate","totalIncome","totalExpenses","remaining","isCurrent","getSavingsData","goal","entries","type","DataCache","constructor","maxAge","cache","Map","get","key","item","Date","now","timestamp","delete","data","set","clear","useBudgetData","_s","budgetData","setBudgetData","payPeriods","setPayPeriods","savingsData","setSavingsData","loading","setLoading","error","setError","fetchBudgetData","cachedData","err","fetchPayPeriods","console","fetchSavingsData","loadData","all","refreshData","useBudgetActions","_s2","addBudgetEntry","entry","log","success","updateBudgetEntry","updates","deleteBudgetEntry"],"sources":["/workspace/src/hooks/useBudgetData.js"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\n\n// Simulated API service - replace with actual API calls\nconst budgetService = {\n  getBudgetData: async () => {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return {\n      income: [\n        { id: 1, amount: 3500, category: 'Salary', date: '2024-01-15' },\n        { id: 2, amount: 500, category: 'Freelance', date: '2024-01-20' }\n      ],\n      expenses: [\n        { id: 1, amount: 1200, category: 'Housing', date: '2024-01-01' },\n        { id: 2, amount: 400, category: 'Food & Dining', date: '2024-01-05' },\n        { id: 3, amount: 200, category: 'Transportation', date: '2024-01-10' }\n      ]\n    };\n  },\n  \n  getPayPeriods: async () => {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    return [\n      {\n        id: 1,\n        startDate: '2024-01-01',\n        endDate: '2024-01-15',\n        totalIncome: 2000,\n        totalExpenses: 1500,\n        remaining: 500,\n        isCurrent: false\n      },\n      {\n        id: 2,\n        startDate: '2024-01-16',\n        endDate: '2024-01-31',\n        totalIncome: 2000,\n        totalExpenses: 1800,\n        remaining: 200,\n        isCurrent: true\n      }\n    ];\n  },\n  \n  getSavingsData: async () => {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    return {\n      goal: 10000,\n      entries: [\n        { id: 1, amount: 500, date: '2024-01-15', type: 'deposit' },\n        { id: 2, amount: 300, date: '2024-01-31', type: 'deposit' },\n        { id: 3, amount: 600, date: '2024-02-15', type: 'deposit' }\n      ]\n    };\n  }\n};\n\n// Cache implementation for performance\nclass DataCache {\n  constructor(maxAge = 5 * 60 * 1000) { // 5 minutes default\n    this.cache = new Map();\n    this.maxAge = maxAge;\n  }\n\n  get(key) {\n    const item = this.cache.get(key);\n    if (!item) return null;\n    \n    if (Date.now() - item.timestamp > this.maxAge) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return item.data;\n  }\n\n  set(key, data) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}\n\nconst cache = new DataCache();\n\nexport const useBudgetData = () => {\n  const [budgetData, setBudgetData] = useState(null);\n  const [payPeriods, setPayPeriods] = useState(null);\n  const [savingsData, setSavingsData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Memoized fetch functions to prevent unnecessary recreations\n  const fetchBudgetData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Check cache first\n      const cachedData = cache.get('budgetData');\n      if (cachedData) {\n        setBudgetData(cachedData);\n        setLoading(false);\n        return;\n      }\n      \n      const data = await budgetService.getBudgetData();\n      cache.set('budgetData', data);\n      setBudgetData(data);\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchPayPeriods = useCallback(async () => {\n    try {\n      const cachedData = cache.get('payPeriods');\n      if (cachedData) {\n        setPayPeriods(cachedData);\n        return;\n      }\n      \n      const data = await budgetService.getPayPeriods();\n      cache.set('payPeriods', data);\n      setPayPeriods(data);\n    } catch (err) {\n      console.error('Failed to fetch pay periods:', err);\n    }\n  }, []);\n\n  const fetchSavingsData = useCallback(async () => {\n    try {\n      const cachedData = cache.get('savingsData');\n      if (cachedData) {\n        setSavingsData(cachedData);\n        return;\n      }\n      \n      const data = await budgetService.getSavingsData();\n      cache.set('savingsData', data);\n      setSavingsData(data);\n    } catch (err) {\n      console.error('Failed to fetch savings data:', err);\n    }\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    const loadData = async () => {\n      await Promise.all([\n        fetchBudgetData(),\n        fetchPayPeriods(),\n        fetchSavingsData()\n      ]);\n    };\n    \n    loadData();\n  }, [fetchBudgetData, fetchPayPeriods, fetchSavingsData]);\n\n  // Refresh function for manual cache invalidation\n  const refreshData = useCallback(() => {\n    cache.clear();\n    fetchBudgetData();\n    fetchPayPeriods();\n    fetchSavingsData();\n  }, [fetchBudgetData, fetchPayPeriods, fetchSavingsData]);\n\n  // Memoized return value to prevent unnecessary re-renders\n  return useMemo(() => ({\n    budgetData,\n    payPeriods,\n    savingsData,\n    loading,\n    error,\n    refreshData\n  }), [budgetData, payPeriods, savingsData, loading, error, refreshData]);\n};\n\nexport const useBudgetActions = () => {\n  const [loading, setLoading] = useState(false);\n\n  const addBudgetEntry = useCallback(async (entry) => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Invalidate cache to refresh data\n      cache.clear();\n      \n      console.log('Added budget entry:', entry);\n      return { success: true };\n    } catch (error) {\n      console.error('Failed to add budget entry:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateBudgetEntry = useCallback(async (id, updates) => {\n    setLoading(true);\n    try {\n      await new Promise(resolve => setTimeout(resolve, 800));\n      cache.clear();\n      console.log('Updated budget entry:', id, updates);\n      return { success: true };\n    } catch (error) {\n      console.error('Failed to update budget entry:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const deleteBudgetEntry = useCallback(async (id) => {\n    setLoading(true);\n    try {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      cache.clear();\n      console.log('Deleted budget entry:', id);\n      return { success: true };\n    } catch (error) {\n      console.error('Failed to delete budget entry:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return useMemo(() => ({\n    addBudgetEntry,\n    updateBudgetEntry,\n    deleteBudgetEntry,\n    loading\n  }), [addBudgetEntry, updateBudgetEntry, deleteBudgetEntry, loading]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}