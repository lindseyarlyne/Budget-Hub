{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nexport const useChartData = (entries, timeRange) => {\n  _s();\n  // Memoized chart data processing\n  const chartData = useMemo(() => {\n    if (!entries || entries.length === 0) return [];\n\n    // Filter entries based on time range\n    const now = new Date();\n    let cutoffDate;\n    switch (timeRange) {\n      case '3months':\n        cutoffDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());\n        break;\n      case '6months':\n        cutoffDate = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());\n        break;\n      case '1year':\n        cutoffDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n        break;\n      default:\n        cutoffDate = null;\n      // Include all data\n    }\n    const filteredEntries = cutoffDate ? entries.filter(entry => new Date(entry.date) >= cutoffDate) : entries;\n\n    // Sort entries by date\n    const sortedEntries = [...filteredEntries].sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Calculate cumulative totals\n    let runningTotal = 0;\n    const processedData = sortedEntries.map(entry => {\n      runningTotal += entry.amount;\n      return {\n        date: entry.date,\n        amount: entry.amount,\n        cumulative: runningTotal,\n        formattedDate: new Date(entry.date).toLocaleDateString()\n      };\n    });\n    return processedData;\n  }, [entries, timeRange]);\n\n  // Memoized trend analysis\n  const trendData = useMemo(() => {\n    if (chartData.length < 2) return null;\n    const firstValue = chartData[0].cumulative;\n    const lastValue = chartData[chartData.length - 1].cumulative;\n    const growth = lastValue - firstValue;\n    const growthPercentage = firstValue > 0 ? growth / firstValue * 100 : 0;\n\n    // Calculate average growth per period\n    const periods = chartData.length - 1;\n    const averageGrowth = periods > 0 ? growth / periods : 0;\n    return {\n      growth,\n      growthPercentage: growthPercentage.toFixed(1),\n      averageGrowth: averageGrowth.toFixed(2),\n      direction: growth > 0 ? 'up' : growth < 0 ? 'down' : 'stable'\n    };\n  }, [chartData]);\n\n  // Memoized data for different chart types\n  const lineChartData = useMemo(() => ({\n    labels: chartData.map(item => item.formattedDate),\n    datasets: [{\n      label: 'Cumulative Savings',\n      data: chartData.map(item => item.cumulative),\n      borderColor: '#4CAF50',\n      backgroundColor: 'rgba(76, 175, 80, 0.1)',\n      tension: 0.4,\n      fill: true\n    }, {\n      label: 'Monthly Contributions',\n      data: chartData.map(item => item.amount),\n      borderColor: '#2196F3',\n      backgroundColor: 'rgba(33, 150, 243, 0.1)',\n      tension: 0.4,\n      fill: false\n    }]\n  }), [chartData]);\n  const barChartData = useMemo(() => ({\n    labels: chartData.map(item => item.formattedDate),\n    datasets: [{\n      label: 'Monthly Savings',\n      data: chartData.map(item => item.amount),\n      backgroundColor: chartData.map((_, index) => `rgba(76, 175, 80, ${0.3 + index / chartData.length * 0.7})`),\n      borderColor: '#4CAF50',\n      borderWidth: 1\n    }]\n  }), [chartData]);\n\n  // Statistical analysis\n  const statistics = useMemo(() => {\n    if (chartData.length === 0) return null;\n    const amounts = chartData.map(item => item.amount);\n    const total = amounts.reduce((sum, amount) => sum + amount, 0);\n    const average = total / amounts.length;\n    const min = Math.min(...amounts);\n    const max = Math.max(...amounts);\n\n    // Calculate standard deviation\n    const variance = amounts.reduce((sum, amount) => sum + Math.pow(amount - average, 2), 0) / amounts.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    // Calculate median\n    const sortedAmounts = [...amounts].sort((a, b) => a - b);\n    const median = sortedAmounts.length % 2 === 0 ? (sortedAmounts[sortedAmounts.length / 2 - 1] + sortedAmounts[sortedAmounts.length / 2]) / 2 : sortedAmounts[Math.floor(sortedAmounts.length / 2)];\n    return {\n      total: total.toFixed(2),\n      average: average.toFixed(2),\n      median: median.toFixed(2),\n      min: min.toFixed(2),\n      max: max.toFixed(2),\n      standardDeviation: standardDeviation.toFixed(2),\n      consistency: standardDeviation < average * 0.3 ? 'High' : standardDeviation < average * 0.6 ? 'Medium' : 'Low'\n    };\n  }, [chartData]);\n  return {\n    chartData,\n    trendData,\n    lineChartData,\n    barChartData,\n    statistics\n  };\n};\n_s(useChartData, \"Ra3KNT0rn2opslYrBC3EHwCp8sg=\");","map":{"version":3,"names":["useMemo","useChartData","entries","timeRange","_s","chartData","length","now","Date","cutoffDate","getFullYear","getMonth","getDate","filteredEntries","filter","entry","date","sortedEntries","sort","a","b","runningTotal","processedData","map","amount","cumulative","formattedDate","toLocaleDateString","trendData","firstValue","lastValue","growth","growthPercentage","periods","averageGrowth","toFixed","direction","lineChartData","labels","item","datasets","label","data","borderColor","backgroundColor","tension","fill","barChartData","_","index","borderWidth","statistics","amounts","total","reduce","sum","average","min","Math","max","variance","pow","standardDeviation","sqrt","sortedAmounts","median","floor","consistency"],"sources":["/workspace/src/hooks/useChartData.js"],"sourcesContent":["import { useMemo } from 'react';\n\nexport const useChartData = (entries, timeRange) => {\n  // Memoized chart data processing\n  const chartData = useMemo(() => {\n    if (!entries || entries.length === 0) return [];\n\n    // Filter entries based on time range\n    const now = new Date();\n    let cutoffDate;\n\n    switch (timeRange) {\n      case '3months':\n        cutoffDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());\n        break;\n      case '6months':\n        cutoffDate = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());\n        break;\n      case '1year':\n        cutoffDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n        break;\n      default:\n        cutoffDate = null; // Include all data\n    }\n\n    const filteredEntries = cutoffDate \n      ? entries.filter(entry => new Date(entry.date) >= cutoffDate)\n      : entries;\n\n    // Sort entries by date\n    const sortedEntries = [...filteredEntries].sort((a, b) => \n      new Date(a.date) - new Date(b.date)\n    );\n\n    // Calculate cumulative totals\n    let runningTotal = 0;\n    const processedData = sortedEntries.map(entry => {\n      runningTotal += entry.amount;\n      return {\n        date: entry.date,\n        amount: entry.amount,\n        cumulative: runningTotal,\n        formattedDate: new Date(entry.date).toLocaleDateString()\n      };\n    });\n\n    return processedData;\n  }, [entries, timeRange]);\n\n  // Memoized trend analysis\n  const trendData = useMemo(() => {\n    if (chartData.length < 2) return null;\n\n    const firstValue = chartData[0].cumulative;\n    const lastValue = chartData[chartData.length - 1].cumulative;\n    const growth = lastValue - firstValue;\n    const growthPercentage = firstValue > 0 ? (growth / firstValue) * 100 : 0;\n\n    // Calculate average growth per period\n    const periods = chartData.length - 1;\n    const averageGrowth = periods > 0 ? growth / periods : 0;\n\n    return {\n      growth,\n      growthPercentage: growthPercentage.toFixed(1),\n      averageGrowth: averageGrowth.toFixed(2),\n      direction: growth > 0 ? 'up' : growth < 0 ? 'down' : 'stable'\n    };\n  }, [chartData]);\n\n  // Memoized data for different chart types\n  const lineChartData = useMemo(() => ({\n    labels: chartData.map(item => item.formattedDate),\n    datasets: [\n      {\n        label: 'Cumulative Savings',\n        data: chartData.map(item => item.cumulative),\n        borderColor: '#4CAF50',\n        backgroundColor: 'rgba(76, 175, 80, 0.1)',\n        tension: 0.4,\n        fill: true\n      },\n      {\n        label: 'Monthly Contributions',\n        data: chartData.map(item => item.amount),\n        borderColor: '#2196F3',\n        backgroundColor: 'rgba(33, 150, 243, 0.1)',\n        tension: 0.4,\n        fill: false\n      }\n    ]\n  }), [chartData]);\n\n  const barChartData = useMemo(() => ({\n    labels: chartData.map(item => item.formattedDate),\n    datasets: [\n      {\n        label: 'Monthly Savings',\n        data: chartData.map(item => item.amount),\n        backgroundColor: chartData.map((_, index) => \n          `rgba(76, 175, 80, ${0.3 + (index / chartData.length) * 0.7})`\n        ),\n        borderColor: '#4CAF50',\n        borderWidth: 1\n      }\n    ]\n  }), [chartData]);\n\n  // Statistical analysis\n  const statistics = useMemo(() => {\n    if (chartData.length === 0) return null;\n\n    const amounts = chartData.map(item => item.amount);\n    const total = amounts.reduce((sum, amount) => sum + amount, 0);\n    const average = total / amounts.length;\n    const min = Math.min(...amounts);\n    const max = Math.max(...amounts);\n\n    // Calculate standard deviation\n    const variance = amounts.reduce((sum, amount) => \n      sum + Math.pow(amount - average, 2), 0\n    ) / amounts.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    // Calculate median\n    const sortedAmounts = [...amounts].sort((a, b) => a - b);\n    const median = sortedAmounts.length % 2 === 0\n      ? (sortedAmounts[sortedAmounts.length / 2 - 1] + sortedAmounts[sortedAmounts.length / 2]) / 2\n      : sortedAmounts[Math.floor(sortedAmounts.length / 2)];\n\n    return {\n      total: total.toFixed(2),\n      average: average.toFixed(2),\n      median: median.toFixed(2),\n      min: min.toFixed(2),\n      max: max.toFixed(2),\n      standardDeviation: standardDeviation.toFixed(2),\n      consistency: standardDeviation < average * 0.3 ? 'High' : \n                  standardDeviation < average * 0.6 ? 'Medium' : 'Low'\n    };\n  }, [chartData]);\n\n  return {\n    chartData,\n    trendData,\n    lineChartData,\n    barChartData,\n    statistics\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}