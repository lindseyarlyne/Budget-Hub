{"ast":null,"code":"// Performance monitoring and optimization utilities\nimport{getCLS,getFID,getFCP,getLCP,getTTFB}from'web-vitals';class PerformanceMonitor{constructor(){this.metrics=new Map();this.observers=new Map();this.initialized=false;}init(){if(this.initialized)return;this.setupWebVitals();this.setupPerformanceObserver();this.setupMemoryMonitoring();this.setupUserTimingAPI();this.initialized=true;}setupWebVitals(){const onPerfEntry=metric=>{this.metrics.set(metric.name,metric);this.logMetric(metric);// Send to analytics in production\nif(process.env.NODE_ENV==='production'){this.sendToAnalytics(metric);}};getCLS(onPerfEntry);getFID(onPerfEntry);getFCP(onPerfEntry);getLCP(onPerfEntry);getTTFB(onPerfEntry);}setupPerformanceObserver(){if('PerformanceObserver'in window){// Long task monitoring\ntry{const longTaskObserver=new PerformanceObserver(list=>{list.getEntries().forEach(entry=>{if(entry.duration>50){console.warn('Long task detected:',{duration:entry.duration,startTime:entry.startTime,name:entry.name});}});});longTaskObserver.observe({entryTypes:['longtask']});this.observers.set('longtask',longTaskObserver);}catch(e){console.warn('Long task observer not supported');}// Layout shift monitoring\ntry{const layoutShiftObserver=new PerformanceObserver(list=>{list.getEntries().forEach(entry=>{if(entry.value>0.1){console.warn('Layout shift detected:',{value:entry.value,startTime:entry.startTime,sources:entry.sources});}});});layoutShiftObserver.observe({entryTypes:['layout-shift']});this.observers.set('layout-shift',layoutShiftObserver);}catch(e){console.warn('Layout shift observer not supported');}// Resource timing\ntry{const resourceObserver=new PerformanceObserver(list=>{list.getEntries().forEach(entry=>{const loadTime=entry.responseEnd-entry.requestStart;if(loadTime>1000){console.warn('Slow resource detected:',{name:entry.name,loadTime,size:entry.transferSize});}});});resourceObserver.observe({entryTypes:['resource']});this.observers.set('resource',resourceObserver);}catch(e){console.warn('Resource observer not supported');}}}setupMemoryMonitoring(){if('memory'in performance){setInterval(()=>{const memory=performance.memory;const usedJSHeapSize=Math.round(memory.usedJSHeapSize/1048576);const totalJSHeapSize=Math.round(memory.totalJSHeapSize/1048576);if(usedJSHeapSize>50){// Alert if over 50MB\nconsole.warn('High memory usage:',{used:`${usedJSHeapSize}MB`,total:`${totalJSHeapSize}MB`,percentage:Math.round(usedJSHeapSize/totalJSHeapSize*100)});}},30000);// Check every 30 seconds\n}}setupUserTimingAPI(){// Custom performance marks and measures\nthis.mark=name=>{performance.mark(name);};this.measure=(name,startMark,endMark)=>{try{performance.measure(name,startMark,endMark);const measure=performance.getEntriesByName(name,'measure')[0];console.log(`Performance measure: ${name} took ${measure.duration.toFixed(2)}ms`);return measure;}catch(e){console.warn('Failed to measure performance:',e);}};}// Component performance tracking\ntrackComponentRender(componentName,renderTime){const metric={name:'component-render',component:componentName,duration:renderTime,timestamp:Date.now()};this.metrics.set(`component-${componentName}`,metric);if(renderTime>16){// Longer than one frame\nconsole.warn(`Slow component render: ${componentName} took ${renderTime.toFixed(2)}ms`);}}// API request performance tracking\ntrackAPIRequest(url,method,duration,status){const metric={name:'api-request',url,method,duration,status,timestamp:Date.now()};this.metrics.set(`api-${url}`,metric);if(duration>2000){// Longer than 2 seconds\nconsole.warn(`Slow API request: ${method} ${url} took ${duration}ms`);}}// Bundle size tracking\nasync trackBundleSize(){if('navigator'in window&&'connection'in navigator){const connection=navigator.connection;console.log('Connection info:',{effectiveType:connection.effectiveType,downlink:connection.downlink,rtt:connection.rtt});}// Track script load times\nconst scripts=document.querySelectorAll('script[src]');scripts.forEach(script=>{const observer=new PerformanceObserver(list=>{list.getEntries().forEach(entry=>{if(entry.name===script.src){console.log(`Script load time: ${script.src} - ${entry.duration.toFixed(2)}ms`);}});});observer.observe({entryTypes:['resource']});});}logMetric(metric){console.log(`Web Vital - ${metric.name}:`,metric.value);// Log warnings for poor performance\nswitch(metric.name){case'LCP':if(metric.value>2500){console.warn('Poor LCP detected. Consider optimizing largest contentful paint.');}break;case'FID':if(metric.value>100){console.warn('Poor FID detected. Consider optimizing JavaScript execution.');}break;case'CLS':if(metric.value>0.1){console.warn('Poor CLS detected. Consider fixing layout shifts.');}break;case'FCP':if(metric.value>1800){console.warn('Poor FCP detected. Consider optimizing critical resources.');}break;case'TTFB':if(metric.value>800){console.warn('Poor TTFB detected. Consider optimizing server response time.');}break;}}sendToAnalytics(metric){// In a real application, you would send this to your analytics service\n// Example: Google Analytics, Adobe Analytics, custom endpoint, etc.\nif(typeof gtag!=='undefined'){gtag('event',metric.name,{event_category:'Web Vitals',value:Math.round(metric.name==='CLS'?metric.value*1000:metric.value),non_interaction:true});}// Or send to custom endpoint\n// fetch('/api/analytics/web-vitals', {\n//   method: 'POST',\n//   body: JSON.stringify(metric),\n//   headers: { 'Content-Type': 'application/json' }\n// });\n}// Get performance report\ngetPerformanceReport(){const report={webVitals:{},customMetrics:{},browserInfo:{userAgent:navigator.userAgent,language:navigator.language,platform:navigator.platform,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine},memoryInfo:performance.memory?{usedJSHeapSize:Math.round(performance.memory.usedJSHeapSize/1048576),totalJSHeapSize:Math.round(performance.memory.totalJSHeapSize/1048576),jsHeapSizeLimit:Math.round(performance.memory.jsHeapSizeLimit/1048576)}:null,timestamp:Date.now()};// Collect Web Vitals\n['CLS','FID','FCP','LCP','TTFB'].forEach(name=>{if(this.metrics.has(name)){report.webVitals[name]=this.metrics.get(name);}});// Collect custom metrics\nthis.metrics.forEach((value,key)=>{if(!['CLS','FID','FCP','LCP','TTFB'].includes(key)){report.customMetrics[key]=value;}});return report;}// Cleanup\ndestroy(){this.observers.forEach(observer=>observer.disconnect());this.observers.clear();this.metrics.clear();this.initialized=false;}}// Performance optimization utilities\nexport const performanceUtils={// Debounce function for performance optimization\ndebounce(func,wait,immediate){let timeout;return function executedFunction(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}const later=()=>{timeout=null;if(!immediate)func.apply(this,args);};const callNow=immediate&&!timeout;clearTimeout(timeout);timeout=setTimeout(later,wait);if(callNow)func.apply(this,args);};},// Throttle function for performance optimization\nthrottle(func,limit){let inThrottle;return function executedFunction(){if(!inThrottle){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}func.apply(this,args);inThrottle=true;setTimeout(()=>inThrottle=false,limit);}};},// Lazy load images\nlazyLoadImages(){if('IntersectionObserver'in window){const imageObserver=new IntersectionObserver((entries,observer)=>{entries.forEach(entry=>{if(entry.isIntersecting){const img=entry.target;img.src=img.dataset.src;img.classList.remove('lazy');observer.unobserve(img);}});});document.querySelectorAll('img[data-src]').forEach(img=>{imageObserver.observe(img);});}},// Preload critical resources\npreloadResource(href,as){let type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;const link=document.createElement('link');link.rel='preload';link.href=href;link.as=as;if(type)link.type=type;document.head.appendChild(link);},// Check if device has reduced motion preference\nprefersReducedMotion(){return window.matchMedia('(prefers-reduced-motion: reduce)').matches;}};// Export singleton instance\nexport const performanceMonitor=new PerformanceMonitor();// React hook for component performance tracking  \nimport React from'react';export const usePerformanceTracking=componentName=>{const[renderStart,setRenderStart]=React.useState(null);React.useEffect(()=>{setRenderStart(performance.now());},[]);React.useEffect(()=>{if(renderStart){const renderTime=performance.now()-renderStart;performanceMonitor.trackComponentRender(componentName,renderTime);}});};export default performanceMonitor;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}